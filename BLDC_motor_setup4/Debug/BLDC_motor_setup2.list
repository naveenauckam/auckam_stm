
BLDC_motor_setup2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000187c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800193c  0800193c  0001193c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800196c  0800196c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800196c  0800196c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800196c  0800196c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800196c  0800196c  0001196c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001970  08001970  00011970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08001980  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08001980  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000750c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013a9  00000000  00000000  00027540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  000288f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000800  00000000  00000000  00029198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f3cd  00000000  00000000  00029998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009681  00000000  00000000  00038d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005eac2  00000000  00000000  000423e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a0ea8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ed8  00000000  00000000  000a0ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001924 	.word	0x08001924

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001924 	.word	0x08001924

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 f9c6 	bl	80005b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f820 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8be 	bl	80003ac <MX_GPIO_Init>
  MX_TIM1_Init();
 8000230:	f000 f866 	bl	8000300 <MX_TIM1_Init>


//	    HAL_GPIO_WritePin(UL_GPIO_Port, UL_Pin,0);
//	  	HAL_GPIO_WritePin(UH_GPIO_Port, UH_Pin,1);
//	  	HAL_GPIO_WritePin(VL_GPIO_Port, VL_Pin,1);
	  	HAL_GPIO_WritePin(VH_GPIO_Port, VH_Pin,0);
 8000234:	2380      	movs	r3, #128	; 0x80
 8000236:	0099      	lsls	r1, r3, #2
 8000238:	2390      	movs	r3, #144	; 0x90
 800023a:	05db      	lsls	r3, r3, #23
 800023c:	2200      	movs	r2, #0
 800023e:	0018      	movs	r0, r3
 8000240:	f000 fc5c 	bl	8000afc <HAL_GPIO_WritePin>
//	  	HAL_GPIO_WritePin(WL_GPIO_Port, WL_Pin,0);
//	  	HAL_GPIO_WritePin(WH_GPIO_Port, WH_Pin,0);

	  	HAL_Delay(3000);
 8000244:	4b08      	ldr	r3, [pc, #32]	; (8000268 <main+0x48>)
 8000246:	0018      	movs	r0, r3
 8000248:	f000 fa18 	bl	800067c <HAL_Delay>

	  	HAL_GPIO_WritePin(VH_GPIO_Port, VH_Pin,1);
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	0099      	lsls	r1, r3, #2
 8000250:	2390      	movs	r3, #144	; 0x90
 8000252:	05db      	lsls	r3, r3, #23
 8000254:	2201      	movs	r2, #1
 8000256:	0018      	movs	r0, r3
 8000258:	f000 fc50 	bl	8000afc <HAL_GPIO_WritePin>
	  	HAL_Delay(3000);
 800025c:	4b02      	ldr	r3, [pc, #8]	; (8000268 <main+0x48>)
 800025e:	0018      	movs	r0, r3
 8000260:	f000 fa0c 	bl	800067c <HAL_Delay>
	  	HAL_GPIO_WritePin(VH_GPIO_Port, VH_Pin,0);
 8000264:	e7e6      	b.n	8000234 <main+0x14>
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	00000bb8 	.word	0x00000bb8

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b590      	push	{r4, r7, lr}
 800026e:	b091      	sub	sp, #68	; 0x44
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	2410      	movs	r4, #16
 8000274:	193b      	adds	r3, r7, r4
 8000276:	0018      	movs	r0, r3
 8000278:	2330      	movs	r3, #48	; 0x30
 800027a:	001a      	movs	r2, r3
 800027c:	2100      	movs	r1, #0
 800027e:	f001 fb49 	bl	8001914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000282:	003b      	movs	r3, r7
 8000284:	0018      	movs	r0, r3
 8000286:	2310      	movs	r3, #16
 8000288:	001a      	movs	r2, r3
 800028a:	2100      	movs	r1, #0
 800028c:	f001 fb42 	bl	8001914 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000290:	0021      	movs	r1, r4
 8000292:	187b      	adds	r3, r7, r1
 8000294:	2202      	movs	r2, #2
 8000296:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000298:	187b      	adds	r3, r7, r1
 800029a:	2201      	movs	r2, #1
 800029c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029e:	187b      	adds	r3, r7, r1
 80002a0:	2210      	movs	r2, #16
 80002a2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	2202      	movs	r2, #2
 80002a8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	2200      	movs	r2, #0
 80002ae:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	22a0      	movs	r2, #160	; 0xa0
 80002b4:	0392      	lsls	r2, r2, #14
 80002b6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2200      	movs	r2, #0
 80002bc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	0018      	movs	r0, r3
 80002c2:	f000 fc39 	bl	8000b38 <HAL_RCC_OscConfig>
 80002c6:	1e03      	subs	r3, r0, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x62>
  {
    Error_Handler();
 80002ca:	f000 f8e3 	bl	8000494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ce:	003b      	movs	r3, r7
 80002d0:	2207      	movs	r2, #7
 80002d2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d4:	003b      	movs	r3, r7
 80002d6:	2202      	movs	r2, #2
 80002d8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002da:	003b      	movs	r3, r7
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e0:	003b      	movs	r3, r7
 80002e2:	2200      	movs	r2, #0
 80002e4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002e6:	003b      	movs	r3, r7
 80002e8:	2101      	movs	r1, #1
 80002ea:	0018      	movs	r0, r3
 80002ec:	f000 ff3e 	bl	800116c <HAL_RCC_ClockConfig>
 80002f0:	1e03      	subs	r3, r0, #0
 80002f2:	d001      	beq.n	80002f8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80002f4:	f000 f8ce 	bl	8000494 <Error_Handler>
  }
}
 80002f8:	46c0      	nop			; (mov r8, r8)
 80002fa:	46bd      	mov	sp, r7
 80002fc:	b011      	add	sp, #68	; 0x44
 80002fe:	bd90      	pop	{r4, r7, pc}

08000300 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b086      	sub	sp, #24
 8000304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000306:	2308      	movs	r3, #8
 8000308:	18fb      	adds	r3, r7, r3
 800030a:	0018      	movs	r0, r3
 800030c:	2310      	movs	r3, #16
 800030e:	001a      	movs	r2, r3
 8000310:	2100      	movs	r1, #0
 8000312:	f001 faff 	bl	8001914 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000316:	003b      	movs	r3, r7
 8000318:	0018      	movs	r0, r3
 800031a:	2308      	movs	r3, #8
 800031c:	001a      	movs	r2, r3
 800031e:	2100      	movs	r1, #0
 8000320:	f001 faf8 	bl	8001914 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000324:	4b1f      	ldr	r3, [pc, #124]	; (80003a4 <MX_TIM1_Init+0xa4>)
 8000326:	4a20      	ldr	r2, [pc, #128]	; (80003a8 <MX_TIM1_Init+0xa8>)
 8000328:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 800032a:	4b1e      	ldr	r3, [pc, #120]	; (80003a4 <MX_TIM1_Init+0xa4>)
 800032c:	222f      	movs	r2, #47	; 0x2f
 800032e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000330:	4b1c      	ldr	r3, [pc, #112]	; (80003a4 <MX_TIM1_Init+0xa4>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000336:	4b1b      	ldr	r3, [pc, #108]	; (80003a4 <MX_TIM1_Init+0xa4>)
 8000338:	2263      	movs	r2, #99	; 0x63
 800033a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800033c:	4b19      	ldr	r3, [pc, #100]	; (80003a4 <MX_TIM1_Init+0xa4>)
 800033e:	2200      	movs	r2, #0
 8000340:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000342:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <MX_TIM1_Init+0xa4>)
 8000344:	2200      	movs	r2, #0
 8000346:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000348:	4b16      	ldr	r3, [pc, #88]	; (80003a4 <MX_TIM1_Init+0xa4>)
 800034a:	2200      	movs	r2, #0
 800034c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800034e:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <MX_TIM1_Init+0xa4>)
 8000350:	0018      	movs	r0, r3
 8000352:	f001 f82f 	bl	80013b4 <HAL_TIM_Base_Init>
 8000356:	1e03      	subs	r3, r0, #0
 8000358:	d001      	beq.n	800035e <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800035a:	f000 f89b 	bl	8000494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800035e:	2108      	movs	r1, #8
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2280      	movs	r2, #128	; 0x80
 8000364:	0152      	lsls	r2, r2, #5
 8000366:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000368:	187a      	adds	r2, r7, r1
 800036a:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <MX_TIM1_Init+0xa4>)
 800036c:	0011      	movs	r1, r2
 800036e:	0018      	movs	r0, r3
 8000370:	f001 f870 	bl	8001454 <HAL_TIM_ConfigClockSource>
 8000374:	1e03      	subs	r3, r0, #0
 8000376:	d001      	beq.n	800037c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000378:	f000 f88c 	bl	8000494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800037c:	003b      	movs	r3, r7
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000382:	003b      	movs	r3, r7
 8000384:	2200      	movs	r2, #0
 8000386:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000388:	003a      	movs	r2, r7
 800038a:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <MX_TIM1_Init+0xa4>)
 800038c:	0011      	movs	r1, r2
 800038e:	0018      	movs	r0, r3
 8000390:	f001 fa44 	bl	800181c <HAL_TIMEx_MasterConfigSynchronization>
 8000394:	1e03      	subs	r3, r0, #0
 8000396:	d001      	beq.n	800039c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000398:	f000 f87c 	bl	8000494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800039c:	46c0      	nop			; (mov r8, r8)
 800039e:	46bd      	mov	sp, r7
 80003a0:	b006      	add	sp, #24
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	20000028 	.word	0x20000028
 80003a8:	40012c00 	.word	0x40012c00

080003ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ac:	b590      	push	{r4, r7, lr}
 80003ae:	b089      	sub	sp, #36	; 0x24
 80003b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b2:	240c      	movs	r4, #12
 80003b4:	193b      	adds	r3, r7, r4
 80003b6:	0018      	movs	r0, r3
 80003b8:	2314      	movs	r3, #20
 80003ba:	001a      	movs	r2, r3
 80003bc:	2100      	movs	r1, #0
 80003be:	f001 faa9 	bl	8001914 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003c2:	4b32      	ldr	r3, [pc, #200]	; (800048c <MX_GPIO_Init+0xe0>)
 80003c4:	695a      	ldr	r2, [r3, #20]
 80003c6:	4b31      	ldr	r3, [pc, #196]	; (800048c <MX_GPIO_Init+0xe0>)
 80003c8:	2180      	movs	r1, #128	; 0x80
 80003ca:	03c9      	lsls	r1, r1, #15
 80003cc:	430a      	orrs	r2, r1
 80003ce:	615a      	str	r2, [r3, #20]
 80003d0:	4b2e      	ldr	r3, [pc, #184]	; (800048c <MX_GPIO_Init+0xe0>)
 80003d2:	695a      	ldr	r2, [r3, #20]
 80003d4:	2380      	movs	r3, #128	; 0x80
 80003d6:	03db      	lsls	r3, r3, #15
 80003d8:	4013      	ands	r3, r2
 80003da:	60bb      	str	r3, [r7, #8]
 80003dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003de:	4b2b      	ldr	r3, [pc, #172]	; (800048c <MX_GPIO_Init+0xe0>)
 80003e0:	695a      	ldr	r2, [r3, #20]
 80003e2:	4b2a      	ldr	r3, [pc, #168]	; (800048c <MX_GPIO_Init+0xe0>)
 80003e4:	2180      	movs	r1, #128	; 0x80
 80003e6:	02c9      	lsls	r1, r1, #11
 80003e8:	430a      	orrs	r2, r1
 80003ea:	615a      	str	r2, [r3, #20]
 80003ec:	4b27      	ldr	r3, [pc, #156]	; (800048c <MX_GPIO_Init+0xe0>)
 80003ee:	695a      	ldr	r2, [r3, #20]
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	02db      	lsls	r3, r3, #11
 80003f4:	4013      	ands	r3, r2
 80003f6:	607b      	str	r3, [r7, #4]
 80003f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fa:	4b24      	ldr	r3, [pc, #144]	; (800048c <MX_GPIO_Init+0xe0>)
 80003fc:	695a      	ldr	r2, [r3, #20]
 80003fe:	4b23      	ldr	r3, [pc, #140]	; (800048c <MX_GPIO_Init+0xe0>)
 8000400:	2180      	movs	r1, #128	; 0x80
 8000402:	0289      	lsls	r1, r1, #10
 8000404:	430a      	orrs	r2, r1
 8000406:	615a      	str	r2, [r3, #20]
 8000408:	4b20      	ldr	r3, [pc, #128]	; (800048c <MX_GPIO_Init+0xe0>)
 800040a:	695a      	ldr	r2, [r3, #20]
 800040c:	2380      	movs	r3, #128	; 0x80
 800040e:	029b      	lsls	r3, r3, #10
 8000410:	4013      	ands	r3, r2
 8000412:	603b      	str	r3, [r7, #0]
 8000414:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UL_Pin|VL_Pin|WL_Pin, GPIO_PIN_RESET);
 8000416:	23e0      	movs	r3, #224	; 0xe0
 8000418:	021b      	lsls	r3, r3, #8
 800041a:	481d      	ldr	r0, [pc, #116]	; (8000490 <MX_GPIO_Init+0xe4>)
 800041c:	2200      	movs	r2, #0
 800041e:	0019      	movs	r1, r3
 8000420:	f000 fb6c 	bl	8000afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UH_Pin|VH_Pin|WH_Pin|M1_Enable_Pin, GPIO_PIN_RESET);
 8000424:	23f0      	movs	r3, #240	; 0xf0
 8000426:	0119      	lsls	r1, r3, #4
 8000428:	2390      	movs	r3, #144	; 0x90
 800042a:	05db      	lsls	r3, r3, #23
 800042c:	2200      	movs	r2, #0
 800042e:	0018      	movs	r0, r3
 8000430:	f000 fb64 	bl	8000afc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : UL_Pin VL_Pin WL_Pin */
  GPIO_InitStruct.Pin = UL_Pin|VL_Pin|WL_Pin;
 8000434:	193b      	adds	r3, r7, r4
 8000436:	22e0      	movs	r2, #224	; 0xe0
 8000438:	0212      	lsls	r2, r2, #8
 800043a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043c:	193b      	adds	r3, r7, r4
 800043e:	2201      	movs	r2, #1
 8000440:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000442:	193b      	adds	r3, r7, r4
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000448:	193b      	adds	r3, r7, r4
 800044a:	2200      	movs	r2, #0
 800044c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800044e:	193b      	adds	r3, r7, r4
 8000450:	4a0f      	ldr	r2, [pc, #60]	; (8000490 <MX_GPIO_Init+0xe4>)
 8000452:	0019      	movs	r1, r3
 8000454:	0010      	movs	r0, r2
 8000456:	f000 f9e9 	bl	800082c <HAL_GPIO_Init>

  /*Configure GPIO pins : UH_Pin VH_Pin WH_Pin M1_Enable_Pin */
  GPIO_InitStruct.Pin = UH_Pin|VH_Pin|WH_Pin|M1_Enable_Pin;
 800045a:	0021      	movs	r1, r4
 800045c:	187b      	adds	r3, r7, r1
 800045e:	22f0      	movs	r2, #240	; 0xf0
 8000460:	0112      	lsls	r2, r2, #4
 8000462:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2201      	movs	r2, #1
 8000468:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2200      	movs	r2, #0
 8000474:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000476:	187a      	adds	r2, r7, r1
 8000478:	2390      	movs	r3, #144	; 0x90
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	0011      	movs	r1, r2
 800047e:	0018      	movs	r0, r3
 8000480:	f000 f9d4 	bl	800082c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000484:	46c0      	nop			; (mov r8, r8)
 8000486:	46bd      	mov	sp, r7
 8000488:	b009      	add	sp, #36	; 0x24
 800048a:	bd90      	pop	{r4, r7, pc}
 800048c:	40021000 	.word	0x40021000
 8000490:	48000400 	.word	0x48000400

08000494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000498:	b672      	cpsid	i
}
 800049a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800049c:	e7fe      	b.n	800049c <Error_Handler+0x8>
	...

080004a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004a6:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <HAL_MspInit+0x44>)
 80004a8:	699a      	ldr	r2, [r3, #24]
 80004aa:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <HAL_MspInit+0x44>)
 80004ac:	2101      	movs	r1, #1
 80004ae:	430a      	orrs	r2, r1
 80004b0:	619a      	str	r2, [r3, #24]
 80004b2:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <HAL_MspInit+0x44>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	2201      	movs	r2, #1
 80004b8:	4013      	ands	r3, r2
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <HAL_MspInit+0x44>)
 80004c0:	69da      	ldr	r2, [r3, #28]
 80004c2:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <HAL_MspInit+0x44>)
 80004c4:	2180      	movs	r1, #128	; 0x80
 80004c6:	0549      	lsls	r1, r1, #21
 80004c8:	430a      	orrs	r2, r1
 80004ca:	61da      	str	r2, [r3, #28]
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <HAL_MspInit+0x44>)
 80004ce:	69da      	ldr	r2, [r3, #28]
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	055b      	lsls	r3, r3, #21
 80004d4:	4013      	ands	r3, r2
 80004d6:	603b      	str	r3, [r7, #0]
 80004d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	b002      	add	sp, #8
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	40021000 	.word	0x40021000

080004e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <HAL_TIM_Base_MspInit+0x38>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d10d      	bne.n	8000516 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80004fa:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <HAL_TIM_Base_MspInit+0x3c>)
 80004fc:	699a      	ldr	r2, [r3, #24]
 80004fe:	4b09      	ldr	r3, [pc, #36]	; (8000524 <HAL_TIM_Base_MspInit+0x3c>)
 8000500:	2180      	movs	r1, #128	; 0x80
 8000502:	0109      	lsls	r1, r1, #4
 8000504:	430a      	orrs	r2, r1
 8000506:	619a      	str	r2, [r3, #24]
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <HAL_TIM_Base_MspInit+0x3c>)
 800050a:	699a      	ldr	r2, [r3, #24]
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	011b      	lsls	r3, r3, #4
 8000510:	4013      	ands	r3, r2
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	b004      	add	sp, #16
 800051c:	bd80      	pop	{r7, pc}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	40012c00 	.word	0x40012c00
 8000524:	40021000 	.word	0x40021000

08000528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800052c:	e7fe      	b.n	800052c <NMI_Handler+0x4>

0800052e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800052e:	b580      	push	{r7, lr}
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000532:	e7fe      	b.n	8000532 <HardFault_Handler+0x4>

08000534 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000538:	46c0      	nop			; (mov r8, r8)
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800054c:	f000 f87a 	bl	8000644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000550:	46c0      	nop			; (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000556:	b580      	push	{r7, lr}
 8000558:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000560:	480d      	ldr	r0, [pc, #52]	; (8000598 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000562:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000564:	f7ff fff7 	bl	8000556 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000568:	480c      	ldr	r0, [pc, #48]	; (800059c <LoopForever+0x6>)
  ldr r1, =_edata
 800056a:	490d      	ldr	r1, [pc, #52]	; (80005a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800056c:	4a0d      	ldr	r2, [pc, #52]	; (80005a4 <LoopForever+0xe>)
  movs r3, #0
 800056e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000570:	e002      	b.n	8000578 <LoopCopyDataInit>

08000572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000576:	3304      	adds	r3, #4

08000578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800057a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800057c:	d3f9      	bcc.n	8000572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800057e:	4a0a      	ldr	r2, [pc, #40]	; (80005a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000580:	4c0a      	ldr	r4, [pc, #40]	; (80005ac <LoopForever+0x16>)
  movs r3, #0
 8000582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000584:	e001      	b.n	800058a <LoopFillZerobss>

08000586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000588:	3204      	adds	r2, #4

0800058a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800058a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800058c:	d3fb      	bcc.n	8000586 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800058e:	f001 f99d 	bl	80018cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000592:	f7ff fe45 	bl	8000220 <main>

08000596 <LoopForever>:

LoopForever:
    b LoopForever
 8000596:	e7fe      	b.n	8000596 <LoopForever>
  ldr   r0, =_estack
 8000598:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800059c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005a4:	08001974 	.word	0x08001974
  ldr r2, =_sbss
 80005a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005ac:	20000074 	.word	0x20000074

080005b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b0:	e7fe      	b.n	80005b0 <ADC1_IRQHandler>
	...

080005b4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b8:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <HAL_Init+0x24>)
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_Init+0x24>)
 80005be:	2110      	movs	r1, #16
 80005c0:	430a      	orrs	r2, r1
 80005c2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80005c4:	2003      	movs	r0, #3
 80005c6:	f000 f809 	bl	80005dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005ca:	f7ff ff69 	bl	80004a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005ce:	2300      	movs	r3, #0
}
 80005d0:	0018      	movs	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	40022000 	.word	0x40022000

080005dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005e4:	4b14      	ldr	r3, [pc, #80]	; (8000638 <HAL_InitTick+0x5c>)
 80005e6:	681c      	ldr	r4, [r3, #0]
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <HAL_InitTick+0x60>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	0019      	movs	r1, r3
 80005ee:	23fa      	movs	r3, #250	; 0xfa
 80005f0:	0098      	lsls	r0, r3, #2
 80005f2:	f7ff fd89 	bl	8000108 <__udivsi3>
 80005f6:	0003      	movs	r3, r0
 80005f8:	0019      	movs	r1, r3
 80005fa:	0020      	movs	r0, r4
 80005fc:	f7ff fd84 	bl	8000108 <__udivsi3>
 8000600:	0003      	movs	r3, r0
 8000602:	0018      	movs	r0, r3
 8000604:	f000 f905 	bl	8000812 <HAL_SYSTICK_Config>
 8000608:	1e03      	subs	r3, r0, #0
 800060a:	d001      	beq.n	8000610 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800060c:	2301      	movs	r3, #1
 800060e:	e00f      	b.n	8000630 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2b03      	cmp	r3, #3
 8000614:	d80b      	bhi.n	800062e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000616:	6879      	ldr	r1, [r7, #4]
 8000618:	2301      	movs	r3, #1
 800061a:	425b      	negs	r3, r3
 800061c:	2200      	movs	r2, #0
 800061e:	0018      	movs	r0, r3
 8000620:	f000 f8e2 	bl	80007e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_InitTick+0x64>)
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800062a:	2300      	movs	r3, #0
 800062c:	e000      	b.n	8000630 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
}
 8000630:	0018      	movs	r0, r3
 8000632:	46bd      	mov	sp, r7
 8000634:	b003      	add	sp, #12
 8000636:	bd90      	pop	{r4, r7, pc}
 8000638:	20000000 	.word	0x20000000
 800063c:	20000008 	.word	0x20000008
 8000640:	20000004 	.word	0x20000004

08000644 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <HAL_IncTick+0x1c>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	001a      	movs	r2, r3
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <HAL_IncTick+0x20>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	18d2      	adds	r2, r2, r3
 8000654:	4b03      	ldr	r3, [pc, #12]	; (8000664 <HAL_IncTick+0x20>)
 8000656:	601a      	str	r2, [r3, #0]
}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	20000008 	.word	0x20000008
 8000664:	20000070 	.word	0x20000070

08000668 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  return uwTick;
 800066c:	4b02      	ldr	r3, [pc, #8]	; (8000678 <HAL_GetTick+0x10>)
 800066e:	681b      	ldr	r3, [r3, #0]
}
 8000670:	0018      	movs	r0, r3
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	20000070 	.word	0x20000070

0800067c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000684:	f7ff fff0 	bl	8000668 <HAL_GetTick>
 8000688:	0003      	movs	r3, r0
 800068a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	3301      	adds	r3, #1
 8000694:	d005      	beq.n	80006a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000696:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <HAL_Delay+0x44>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	001a      	movs	r2, r3
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	189b      	adds	r3, r3, r2
 80006a0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	f7ff ffe0 	bl	8000668 <HAL_GetTick>
 80006a8:	0002      	movs	r2, r0
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	68fa      	ldr	r2, [r7, #12]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d8f7      	bhi.n	80006a4 <HAL_Delay+0x28>
  {
  }
}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b004      	add	sp, #16
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	20000008 	.word	0x20000008

080006c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	0002      	movs	r2, r0
 80006cc:	6039      	str	r1, [r7, #0]
 80006ce:	1dfb      	adds	r3, r7, #7
 80006d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006d2:	1dfb      	adds	r3, r7, #7
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b7f      	cmp	r3, #127	; 0x7f
 80006d8:	d828      	bhi.n	800072c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006da:	4a2f      	ldr	r2, [pc, #188]	; (8000798 <__NVIC_SetPriority+0xd4>)
 80006dc:	1dfb      	adds	r3, r7, #7
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	b25b      	sxtb	r3, r3
 80006e2:	089b      	lsrs	r3, r3, #2
 80006e4:	33c0      	adds	r3, #192	; 0xc0
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	589b      	ldr	r3, [r3, r2]
 80006ea:	1dfa      	adds	r2, r7, #7
 80006ec:	7812      	ldrb	r2, [r2, #0]
 80006ee:	0011      	movs	r1, r2
 80006f0:	2203      	movs	r2, #3
 80006f2:	400a      	ands	r2, r1
 80006f4:	00d2      	lsls	r2, r2, #3
 80006f6:	21ff      	movs	r1, #255	; 0xff
 80006f8:	4091      	lsls	r1, r2
 80006fa:	000a      	movs	r2, r1
 80006fc:	43d2      	mvns	r2, r2
 80006fe:	401a      	ands	r2, r3
 8000700:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	019b      	lsls	r3, r3, #6
 8000706:	22ff      	movs	r2, #255	; 0xff
 8000708:	401a      	ands	r2, r3
 800070a:	1dfb      	adds	r3, r7, #7
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	0018      	movs	r0, r3
 8000710:	2303      	movs	r3, #3
 8000712:	4003      	ands	r3, r0
 8000714:	00db      	lsls	r3, r3, #3
 8000716:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000718:	481f      	ldr	r0, [pc, #124]	; (8000798 <__NVIC_SetPriority+0xd4>)
 800071a:	1dfb      	adds	r3, r7, #7
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	b25b      	sxtb	r3, r3
 8000720:	089b      	lsrs	r3, r3, #2
 8000722:	430a      	orrs	r2, r1
 8000724:	33c0      	adds	r3, #192	; 0xc0
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800072a:	e031      	b.n	8000790 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800072c:	4a1b      	ldr	r2, [pc, #108]	; (800079c <__NVIC_SetPriority+0xd8>)
 800072e:	1dfb      	adds	r3, r7, #7
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	0019      	movs	r1, r3
 8000734:	230f      	movs	r3, #15
 8000736:	400b      	ands	r3, r1
 8000738:	3b08      	subs	r3, #8
 800073a:	089b      	lsrs	r3, r3, #2
 800073c:	3306      	adds	r3, #6
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	18d3      	adds	r3, r2, r3
 8000742:	3304      	adds	r3, #4
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	1dfa      	adds	r2, r7, #7
 8000748:	7812      	ldrb	r2, [r2, #0]
 800074a:	0011      	movs	r1, r2
 800074c:	2203      	movs	r2, #3
 800074e:	400a      	ands	r2, r1
 8000750:	00d2      	lsls	r2, r2, #3
 8000752:	21ff      	movs	r1, #255	; 0xff
 8000754:	4091      	lsls	r1, r2
 8000756:	000a      	movs	r2, r1
 8000758:	43d2      	mvns	r2, r2
 800075a:	401a      	ands	r2, r3
 800075c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	019b      	lsls	r3, r3, #6
 8000762:	22ff      	movs	r2, #255	; 0xff
 8000764:	401a      	ands	r2, r3
 8000766:	1dfb      	adds	r3, r7, #7
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	0018      	movs	r0, r3
 800076c:	2303      	movs	r3, #3
 800076e:	4003      	ands	r3, r0
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000774:	4809      	ldr	r0, [pc, #36]	; (800079c <__NVIC_SetPriority+0xd8>)
 8000776:	1dfb      	adds	r3, r7, #7
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	001c      	movs	r4, r3
 800077c:	230f      	movs	r3, #15
 800077e:	4023      	ands	r3, r4
 8000780:	3b08      	subs	r3, #8
 8000782:	089b      	lsrs	r3, r3, #2
 8000784:	430a      	orrs	r2, r1
 8000786:	3306      	adds	r3, #6
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	18c3      	adds	r3, r0, r3
 800078c:	3304      	adds	r3, #4
 800078e:	601a      	str	r2, [r3, #0]
}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	b003      	add	sp, #12
 8000796:	bd90      	pop	{r4, r7, pc}
 8000798:	e000e100 	.word	0xe000e100
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	1e5a      	subs	r2, r3, #1
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	045b      	lsls	r3, r3, #17
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d301      	bcc.n	80007b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007b4:	2301      	movs	r3, #1
 80007b6:	e010      	b.n	80007da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <SysTick_Config+0x44>)
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	3a01      	subs	r2, #1
 80007be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007c0:	2301      	movs	r3, #1
 80007c2:	425b      	negs	r3, r3
 80007c4:	2103      	movs	r1, #3
 80007c6:	0018      	movs	r0, r3
 80007c8:	f7ff ff7c 	bl	80006c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <SysTick_Config+0x44>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007d2:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <SysTick_Config+0x44>)
 80007d4:	2207      	movs	r2, #7
 80007d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007d8:	2300      	movs	r3, #0
}
 80007da:	0018      	movs	r0, r3
 80007dc:	46bd      	mov	sp, r7
 80007de:	b002      	add	sp, #8
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	e000e010 	.word	0xe000e010

080007e8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60b9      	str	r1, [r7, #8]
 80007f0:	607a      	str	r2, [r7, #4]
 80007f2:	210f      	movs	r1, #15
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	1c02      	adds	r2, r0, #0
 80007f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80007fa:	68ba      	ldr	r2, [r7, #8]
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	b25b      	sxtb	r3, r3
 8000802:	0011      	movs	r1, r2
 8000804:	0018      	movs	r0, r3
 8000806:	f7ff ff5d 	bl	80006c4 <__NVIC_SetPriority>
}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	b004      	add	sp, #16
 8000810:	bd80      	pop	{r7, pc}

08000812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b082      	sub	sp, #8
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	0018      	movs	r0, r3
 800081e:	f7ff ffbf 	bl	80007a0 <SysTick_Config>
 8000822:	0003      	movs	r3, r0
}
 8000824:	0018      	movs	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	b002      	add	sp, #8
 800082a:	bd80      	pop	{r7, pc}

0800082c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800083a:	e149      	b.n	8000ad0 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2101      	movs	r1, #1
 8000842:	697a      	ldr	r2, [r7, #20]
 8000844:	4091      	lsls	r1, r2
 8000846:	000a      	movs	r2, r1
 8000848:	4013      	ands	r3, r2
 800084a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d100      	bne.n	8000854 <HAL_GPIO_Init+0x28>
 8000852:	e13a      	b.n	8000aca <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	2203      	movs	r2, #3
 800085a:	4013      	ands	r3, r2
 800085c:	2b01      	cmp	r3, #1
 800085e:	d005      	beq.n	800086c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	2203      	movs	r2, #3
 8000866:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000868:	2b02      	cmp	r3, #2
 800086a:	d130      	bne.n	80008ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	2203      	movs	r2, #3
 8000878:	409a      	lsls	r2, r3
 800087a:	0013      	movs	r3, r2
 800087c:	43da      	mvns	r2, r3
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	4013      	ands	r3, r2
 8000882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	68da      	ldr	r2, [r3, #12]
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	409a      	lsls	r2, r3
 800088e:	0013      	movs	r3, r2
 8000890:	693a      	ldr	r2, [r7, #16]
 8000892:	4313      	orrs	r3, r2
 8000894:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	693a      	ldr	r2, [r7, #16]
 800089a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008a2:	2201      	movs	r2, #1
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	409a      	lsls	r2, r3
 80008a8:	0013      	movs	r3, r2
 80008aa:	43da      	mvns	r2, r3
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	4013      	ands	r3, r2
 80008b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	091b      	lsrs	r3, r3, #4
 80008b8:	2201      	movs	r2, #1
 80008ba:	401a      	ands	r2, r3
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	409a      	lsls	r2, r3
 80008c0:	0013      	movs	r3, r2
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	2203      	movs	r2, #3
 80008d4:	4013      	ands	r3, r2
 80008d6:	2b03      	cmp	r3, #3
 80008d8:	d017      	beq.n	800090a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	68db      	ldr	r3, [r3, #12]
 80008de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	2203      	movs	r2, #3
 80008e6:	409a      	lsls	r2, r3
 80008e8:	0013      	movs	r3, r2
 80008ea:	43da      	mvns	r2, r3
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	4013      	ands	r3, r2
 80008f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	689a      	ldr	r2, [r3, #8]
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	409a      	lsls	r2, r3
 80008fc:	0013      	movs	r3, r2
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	4313      	orrs	r3, r2
 8000902:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	2203      	movs	r2, #3
 8000910:	4013      	ands	r3, r2
 8000912:	2b02      	cmp	r3, #2
 8000914:	d123      	bne.n	800095e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	08da      	lsrs	r2, r3, #3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3208      	adds	r2, #8
 800091e:	0092      	lsls	r2, r2, #2
 8000920:	58d3      	ldr	r3, [r2, r3]
 8000922:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	2207      	movs	r2, #7
 8000928:	4013      	ands	r3, r2
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	220f      	movs	r2, #15
 800092e:	409a      	lsls	r2, r3
 8000930:	0013      	movs	r3, r2
 8000932:	43da      	mvns	r2, r3
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	4013      	ands	r3, r2
 8000938:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	691a      	ldr	r2, [r3, #16]
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	2107      	movs	r1, #7
 8000942:	400b      	ands	r3, r1
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	409a      	lsls	r2, r3
 8000948:	0013      	movs	r3, r2
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	4313      	orrs	r3, r2
 800094e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	08da      	lsrs	r2, r3, #3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3208      	adds	r2, #8
 8000958:	0092      	lsls	r2, r2, #2
 800095a:	6939      	ldr	r1, [r7, #16]
 800095c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	2203      	movs	r2, #3
 800096a:	409a      	lsls	r2, r3
 800096c:	0013      	movs	r3, r2
 800096e:	43da      	mvns	r2, r3
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	4013      	ands	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	2203      	movs	r2, #3
 800097c:	401a      	ands	r2, r3
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	409a      	lsls	r2, r3
 8000984:	0013      	movs	r3, r2
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	4313      	orrs	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685a      	ldr	r2, [r3, #4]
 8000996:	23c0      	movs	r3, #192	; 0xc0
 8000998:	029b      	lsls	r3, r3, #10
 800099a:	4013      	ands	r3, r2
 800099c:	d100      	bne.n	80009a0 <HAL_GPIO_Init+0x174>
 800099e:	e094      	b.n	8000aca <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a0:	4b51      	ldr	r3, [pc, #324]	; (8000ae8 <HAL_GPIO_Init+0x2bc>)
 80009a2:	699a      	ldr	r2, [r3, #24]
 80009a4:	4b50      	ldr	r3, [pc, #320]	; (8000ae8 <HAL_GPIO_Init+0x2bc>)
 80009a6:	2101      	movs	r1, #1
 80009a8:	430a      	orrs	r2, r1
 80009aa:	619a      	str	r2, [r3, #24]
 80009ac:	4b4e      	ldr	r3, [pc, #312]	; (8000ae8 <HAL_GPIO_Init+0x2bc>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	2201      	movs	r2, #1
 80009b2:	4013      	ands	r3, r2
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009b8:	4a4c      	ldr	r2, [pc, #304]	; (8000aec <HAL_GPIO_Init+0x2c0>)
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	089b      	lsrs	r3, r3, #2
 80009be:	3302      	adds	r3, #2
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	589b      	ldr	r3, [r3, r2]
 80009c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	2203      	movs	r2, #3
 80009ca:	4013      	ands	r3, r2
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	220f      	movs	r2, #15
 80009d0:	409a      	lsls	r2, r3
 80009d2:	0013      	movs	r3, r2
 80009d4:	43da      	mvns	r2, r3
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	4013      	ands	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	2390      	movs	r3, #144	; 0x90
 80009e0:	05db      	lsls	r3, r3, #23
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d00d      	beq.n	8000a02 <HAL_GPIO_Init+0x1d6>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a41      	ldr	r2, [pc, #260]	; (8000af0 <HAL_GPIO_Init+0x2c4>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d007      	beq.n	80009fe <HAL_GPIO_Init+0x1d2>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a40      	ldr	r2, [pc, #256]	; (8000af4 <HAL_GPIO_Init+0x2c8>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d101      	bne.n	80009fa <HAL_GPIO_Init+0x1ce>
 80009f6:	2302      	movs	r3, #2
 80009f8:	e004      	b.n	8000a04 <HAL_GPIO_Init+0x1d8>
 80009fa:	2305      	movs	r3, #5
 80009fc:	e002      	b.n	8000a04 <HAL_GPIO_Init+0x1d8>
 80009fe:	2301      	movs	r3, #1
 8000a00:	e000      	b.n	8000a04 <HAL_GPIO_Init+0x1d8>
 8000a02:	2300      	movs	r3, #0
 8000a04:	697a      	ldr	r2, [r7, #20]
 8000a06:	2103      	movs	r1, #3
 8000a08:	400a      	ands	r2, r1
 8000a0a:	0092      	lsls	r2, r2, #2
 8000a0c:	4093      	lsls	r3, r2
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a14:	4935      	ldr	r1, [pc, #212]	; (8000aec <HAL_GPIO_Init+0x2c0>)
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	089b      	lsrs	r3, r3, #2
 8000a1a:	3302      	adds	r3, #2
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a22:	4b35      	ldr	r3, [pc, #212]	; (8000af8 <HAL_GPIO_Init+0x2cc>)
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	43da      	mvns	r2, r3
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685a      	ldr	r2, [r3, #4]
 8000a36:	2380      	movs	r3, #128	; 0x80
 8000a38:	035b      	lsls	r3, r3, #13
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	d003      	beq.n	8000a46 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a46:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <HAL_GPIO_Init+0x2cc>)
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000a4c:	4b2a      	ldr	r3, [pc, #168]	; (8000af8 <HAL_GPIO_Init+0x2cc>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	43da      	mvns	r2, r3
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685a      	ldr	r2, [r3, #4]
 8000a60:	2380      	movs	r3, #128	; 0x80
 8000a62:	039b      	lsls	r3, r3, #14
 8000a64:	4013      	ands	r3, r2
 8000a66:	d003      	beq.n	8000a70 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a70:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <HAL_GPIO_Init+0x2cc>)
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000a76:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <HAL_GPIO_Init+0x2cc>)
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	43da      	mvns	r2, r3
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	4013      	ands	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685a      	ldr	r2, [r3, #4]
 8000a8a:	2380      	movs	r3, #128	; 0x80
 8000a8c:	029b      	lsls	r3, r3, #10
 8000a8e:	4013      	ands	r3, r2
 8000a90:	d003      	beq.n	8000a9a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <HAL_GPIO_Init+0x2cc>)
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <HAL_GPIO_Init+0x2cc>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	43da      	mvns	r2, r3
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	4013      	ands	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685a      	ldr	r2, [r3, #4]
 8000ab4:	2380      	movs	r3, #128	; 0x80
 8000ab6:	025b      	lsls	r3, r3, #9
 8000ab8:	4013      	ands	r3, r2
 8000aba:	d003      	beq.n	8000ac4 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <HAL_GPIO_Init+0x2cc>)
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	3301      	adds	r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	40da      	lsrs	r2, r3
 8000ad8:	1e13      	subs	r3, r2, #0
 8000ada:	d000      	beq.n	8000ade <HAL_GPIO_Init+0x2b2>
 8000adc:	e6ae      	b.n	800083c <HAL_GPIO_Init+0x10>
  } 
}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b006      	add	sp, #24
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40010000 	.word	0x40010000
 8000af0:	48000400 	.word	0x48000400
 8000af4:	48000800 	.word	0x48000800
 8000af8:	40010400 	.word	0x40010400

08000afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	0008      	movs	r0, r1
 8000b06:	0011      	movs	r1, r2
 8000b08:	1cbb      	adds	r3, r7, #2
 8000b0a:	1c02      	adds	r2, r0, #0
 8000b0c:	801a      	strh	r2, [r3, #0]
 8000b0e:	1c7b      	adds	r3, r7, #1
 8000b10:	1c0a      	adds	r2, r1, #0
 8000b12:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b14:	1c7b      	adds	r3, r7, #1
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d004      	beq.n	8000b26 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b1c:	1cbb      	adds	r3, r7, #2
 8000b1e:	881a      	ldrh	r2, [r3, #0]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b24:	e003      	b.n	8000b2e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b26:	1cbb      	adds	r3, r7, #2
 8000b28:	881a      	ldrh	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b002      	add	sp, #8
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b088      	sub	sp, #32
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d101      	bne.n	8000b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e301      	b.n	800114e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2201      	movs	r2, #1
 8000b50:	4013      	ands	r3, r2
 8000b52:	d100      	bne.n	8000b56 <HAL_RCC_OscConfig+0x1e>
 8000b54:	e08d      	b.n	8000c72 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b56:	4bc3      	ldr	r3, [pc, #780]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	d00e      	beq.n	8000b80 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b62:	4bc0      	ldr	r3, [pc, #768]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	220c      	movs	r2, #12
 8000b68:	4013      	ands	r3, r2
 8000b6a:	2b08      	cmp	r3, #8
 8000b6c:	d116      	bne.n	8000b9c <HAL_RCC_OscConfig+0x64>
 8000b6e:	4bbd      	ldr	r3, [pc, #756]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000b70:	685a      	ldr	r2, [r3, #4]
 8000b72:	2380      	movs	r3, #128	; 0x80
 8000b74:	025b      	lsls	r3, r3, #9
 8000b76:	401a      	ands	r2, r3
 8000b78:	2380      	movs	r3, #128	; 0x80
 8000b7a:	025b      	lsls	r3, r3, #9
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d10d      	bne.n	8000b9c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b80:	4bb8      	ldr	r3, [pc, #736]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	029b      	lsls	r3, r3, #10
 8000b88:	4013      	ands	r3, r2
 8000b8a:	d100      	bne.n	8000b8e <HAL_RCC_OscConfig+0x56>
 8000b8c:	e070      	b.n	8000c70 <HAL_RCC_OscConfig+0x138>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d000      	beq.n	8000b98 <HAL_RCC_OscConfig+0x60>
 8000b96:	e06b      	b.n	8000c70 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	e2d8      	b.n	800114e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d107      	bne.n	8000bb4 <HAL_RCC_OscConfig+0x7c>
 8000ba4:	4baf      	ldr	r3, [pc, #700]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4bae      	ldr	r3, [pc, #696]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000baa:	2180      	movs	r1, #128	; 0x80
 8000bac:	0249      	lsls	r1, r1, #9
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	e02f      	b.n	8000c14 <HAL_RCC_OscConfig+0xdc>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d10c      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x9e>
 8000bbc:	4ba9      	ldr	r3, [pc, #676]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4ba8      	ldr	r3, [pc, #672]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000bc2:	49a9      	ldr	r1, [pc, #676]	; (8000e68 <HAL_RCC_OscConfig+0x330>)
 8000bc4:	400a      	ands	r2, r1
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	4ba6      	ldr	r3, [pc, #664]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4ba5      	ldr	r3, [pc, #660]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000bce:	49a7      	ldr	r1, [pc, #668]	; (8000e6c <HAL_RCC_OscConfig+0x334>)
 8000bd0:	400a      	ands	r2, r1
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	e01e      	b.n	8000c14 <HAL_RCC_OscConfig+0xdc>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	2b05      	cmp	r3, #5
 8000bdc:	d10e      	bne.n	8000bfc <HAL_RCC_OscConfig+0xc4>
 8000bde:	4ba1      	ldr	r3, [pc, #644]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	4ba0      	ldr	r3, [pc, #640]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000be4:	2180      	movs	r1, #128	; 0x80
 8000be6:	02c9      	lsls	r1, r1, #11
 8000be8:	430a      	orrs	r2, r1
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	4b9d      	ldr	r3, [pc, #628]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b9c      	ldr	r3, [pc, #624]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000bf2:	2180      	movs	r1, #128	; 0x80
 8000bf4:	0249      	lsls	r1, r1, #9
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	e00b      	b.n	8000c14 <HAL_RCC_OscConfig+0xdc>
 8000bfc:	4b99      	ldr	r3, [pc, #612]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b98      	ldr	r3, [pc, #608]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000c02:	4999      	ldr	r1, [pc, #612]	; (8000e68 <HAL_RCC_OscConfig+0x330>)
 8000c04:	400a      	ands	r2, r1
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	4b96      	ldr	r3, [pc, #600]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b95      	ldr	r3, [pc, #596]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000c0e:	4997      	ldr	r1, [pc, #604]	; (8000e6c <HAL_RCC_OscConfig+0x334>)
 8000c10:	400a      	ands	r2, r1
 8000c12:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d014      	beq.n	8000c46 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c1c:	f7ff fd24 	bl	8000668 <HAL_GetTick>
 8000c20:	0003      	movs	r3, r0
 8000c22:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c24:	e008      	b.n	8000c38 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c26:	f7ff fd1f 	bl	8000668 <HAL_GetTick>
 8000c2a:	0002      	movs	r2, r0
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	2b64      	cmp	r3, #100	; 0x64
 8000c32:	d901      	bls.n	8000c38 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000c34:	2303      	movs	r3, #3
 8000c36:	e28a      	b.n	800114e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c38:	4b8a      	ldr	r3, [pc, #552]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	2380      	movs	r3, #128	; 0x80
 8000c3e:	029b      	lsls	r3, r3, #10
 8000c40:	4013      	ands	r3, r2
 8000c42:	d0f0      	beq.n	8000c26 <HAL_RCC_OscConfig+0xee>
 8000c44:	e015      	b.n	8000c72 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c46:	f7ff fd0f 	bl	8000668 <HAL_GetTick>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c4e:	e008      	b.n	8000c62 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c50:	f7ff fd0a 	bl	8000668 <HAL_GetTick>
 8000c54:	0002      	movs	r2, r0
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	2b64      	cmp	r3, #100	; 0x64
 8000c5c:	d901      	bls.n	8000c62 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	e275      	b.n	800114e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c62:	4b80      	ldr	r3, [pc, #512]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	2380      	movs	r3, #128	; 0x80
 8000c68:	029b      	lsls	r3, r3, #10
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	d1f0      	bne.n	8000c50 <HAL_RCC_OscConfig+0x118>
 8000c6e:	e000      	b.n	8000c72 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c70:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2202      	movs	r2, #2
 8000c78:	4013      	ands	r3, r2
 8000c7a:	d100      	bne.n	8000c7e <HAL_RCC_OscConfig+0x146>
 8000c7c:	e069      	b.n	8000d52 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c7e:	4b79      	ldr	r3, [pc, #484]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	220c      	movs	r2, #12
 8000c84:	4013      	ands	r3, r2
 8000c86:	d00b      	beq.n	8000ca0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c88:	4b76      	ldr	r3, [pc, #472]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	220c      	movs	r2, #12
 8000c8e:	4013      	ands	r3, r2
 8000c90:	2b08      	cmp	r3, #8
 8000c92:	d11c      	bne.n	8000cce <HAL_RCC_OscConfig+0x196>
 8000c94:	4b73      	ldr	r3, [pc, #460]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000c96:	685a      	ldr	r2, [r3, #4]
 8000c98:	2380      	movs	r3, #128	; 0x80
 8000c9a:	025b      	lsls	r3, r3, #9
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	d116      	bne.n	8000cce <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ca0:	4b70      	ldr	r3, [pc, #448]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	d005      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x17e>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d001      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e24b      	b.n	800114e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cb6:	4b6b      	ldr	r3, [pc, #428]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	22f8      	movs	r2, #248	; 0xf8
 8000cbc:	4393      	bics	r3, r2
 8000cbe:	0019      	movs	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	691b      	ldr	r3, [r3, #16]
 8000cc4:	00da      	lsls	r2, r3, #3
 8000cc6:	4b67      	ldr	r3, [pc, #412]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ccc:	e041      	b.n	8000d52 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	68db      	ldr	r3, [r3, #12]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d024      	beq.n	8000d20 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cd6:	4b63      	ldr	r3, [pc, #396]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	4b62      	ldr	r3, [pc, #392]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000cdc:	2101      	movs	r1, #1
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce2:	f7ff fcc1 	bl	8000668 <HAL_GetTick>
 8000ce6:	0003      	movs	r3, r0
 8000ce8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cea:	e008      	b.n	8000cfe <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cec:	f7ff fcbc 	bl	8000668 <HAL_GetTick>
 8000cf0:	0002      	movs	r2, r0
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d901      	bls.n	8000cfe <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	e227      	b.n	800114e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cfe:	4b59      	ldr	r3, [pc, #356]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2202      	movs	r2, #2
 8000d04:	4013      	ands	r3, r2
 8000d06:	d0f1      	beq.n	8000cec <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d08:	4b56      	ldr	r3, [pc, #344]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	22f8      	movs	r2, #248	; 0xf8
 8000d0e:	4393      	bics	r3, r2
 8000d10:	0019      	movs	r1, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	691b      	ldr	r3, [r3, #16]
 8000d16:	00da      	lsls	r2, r3, #3
 8000d18:	4b52      	ldr	r3, [pc, #328]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	e018      	b.n	8000d52 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d20:	4b50      	ldr	r3, [pc, #320]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b4f      	ldr	r3, [pc, #316]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000d26:	2101      	movs	r1, #1
 8000d28:	438a      	bics	r2, r1
 8000d2a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2c:	f7ff fc9c 	bl	8000668 <HAL_GetTick>
 8000d30:	0003      	movs	r3, r0
 8000d32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d34:	e008      	b.n	8000d48 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d36:	f7ff fc97 	bl	8000668 <HAL_GetTick>
 8000d3a:	0002      	movs	r2, r0
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d901      	bls.n	8000d48 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000d44:	2303      	movs	r3, #3
 8000d46:	e202      	b.n	800114e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d48:	4b46      	ldr	r3, [pc, #280]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	4013      	ands	r3, r2
 8000d50:	d1f1      	bne.n	8000d36 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2208      	movs	r2, #8
 8000d58:	4013      	ands	r3, r2
 8000d5a:	d036      	beq.n	8000dca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	69db      	ldr	r3, [r3, #28]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d019      	beq.n	8000d98 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d64:	4b3f      	ldr	r3, [pc, #252]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000d66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d68:	4b3e      	ldr	r3, [pc, #248]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d70:	f7ff fc7a 	bl	8000668 <HAL_GetTick>
 8000d74:	0003      	movs	r3, r0
 8000d76:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d78:	e008      	b.n	8000d8c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d7a:	f7ff fc75 	bl	8000668 <HAL_GetTick>
 8000d7e:	0002      	movs	r2, r0
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	1ad3      	subs	r3, r2, r3
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d901      	bls.n	8000d8c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	e1e0      	b.n	800114e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d8c:	4b35      	ldr	r3, [pc, #212]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d90:	2202      	movs	r2, #2
 8000d92:	4013      	ands	r3, r2
 8000d94:	d0f1      	beq.n	8000d7a <HAL_RCC_OscConfig+0x242>
 8000d96:	e018      	b.n	8000dca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d98:	4b32      	ldr	r3, [pc, #200]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000d9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d9c:	4b31      	ldr	r3, [pc, #196]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000d9e:	2101      	movs	r1, #1
 8000da0:	438a      	bics	r2, r1
 8000da2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da4:	f7ff fc60 	bl	8000668 <HAL_GetTick>
 8000da8:	0003      	movs	r3, r0
 8000daa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dac:	e008      	b.n	8000dc0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dae:	f7ff fc5b 	bl	8000668 <HAL_GetTick>
 8000db2:	0002      	movs	r2, r0
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d901      	bls.n	8000dc0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	e1c6      	b.n	800114e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dc0:	4b28      	ldr	r3, [pc, #160]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	d1f1      	bne.n	8000dae <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2204      	movs	r2, #4
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	d100      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x29e>
 8000dd4:	e0b4      	b.n	8000f40 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dd6:	201f      	movs	r0, #31
 8000dd8:	183b      	adds	r3, r7, r0
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dde:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000de0:	69da      	ldr	r2, [r3, #28]
 8000de2:	2380      	movs	r3, #128	; 0x80
 8000de4:	055b      	lsls	r3, r3, #21
 8000de6:	4013      	ands	r3, r2
 8000de8:	d110      	bne.n	8000e0c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dea:	4b1e      	ldr	r3, [pc, #120]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000dec:	69da      	ldr	r2, [r3, #28]
 8000dee:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000df0:	2180      	movs	r1, #128	; 0x80
 8000df2:	0549      	lsls	r1, r1, #21
 8000df4:	430a      	orrs	r2, r1
 8000df6:	61da      	str	r2, [r3, #28]
 8000df8:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000dfa:	69da      	ldr	r2, [r3, #28]
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	055b      	lsls	r3, r3, #21
 8000e00:	4013      	ands	r3, r2
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e06:	183b      	adds	r3, r7, r0
 8000e08:	2201      	movs	r2, #1
 8000e0a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e0c:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <HAL_RCC_OscConfig+0x338>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	2380      	movs	r3, #128	; 0x80
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4013      	ands	r3, r2
 8000e16:	d11a      	bne.n	8000e4e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e18:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <HAL_RCC_OscConfig+0x338>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <HAL_RCC_OscConfig+0x338>)
 8000e1e:	2180      	movs	r1, #128	; 0x80
 8000e20:	0049      	lsls	r1, r1, #1
 8000e22:	430a      	orrs	r2, r1
 8000e24:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e26:	f7ff fc1f 	bl	8000668 <HAL_GetTick>
 8000e2a:	0003      	movs	r3, r0
 8000e2c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e2e:	e008      	b.n	8000e42 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e30:	f7ff fc1a 	bl	8000668 <HAL_GetTick>
 8000e34:	0002      	movs	r2, r0
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b64      	cmp	r3, #100	; 0x64
 8000e3c:	d901      	bls.n	8000e42 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e185      	b.n	800114e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <HAL_RCC_OscConfig+0x338>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	2380      	movs	r3, #128	; 0x80
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	d0f0      	beq.n	8000e30 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d10e      	bne.n	8000e74 <HAL_RCC_OscConfig+0x33c>
 8000e56:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000e58:	6a1a      	ldr	r2, [r3, #32]
 8000e5a:	4b02      	ldr	r3, [pc, #8]	; (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	621a      	str	r2, [r3, #32]
 8000e62:	e035      	b.n	8000ed0 <HAL_RCC_OscConfig+0x398>
 8000e64:	40021000 	.word	0x40021000
 8000e68:	fffeffff 	.word	0xfffeffff
 8000e6c:	fffbffff 	.word	0xfffbffff
 8000e70:	40007000 	.word	0x40007000
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d10c      	bne.n	8000e96 <HAL_RCC_OscConfig+0x35e>
 8000e7c:	4bb6      	ldr	r3, [pc, #728]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000e7e:	6a1a      	ldr	r2, [r3, #32]
 8000e80:	4bb5      	ldr	r3, [pc, #724]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000e82:	2101      	movs	r1, #1
 8000e84:	438a      	bics	r2, r1
 8000e86:	621a      	str	r2, [r3, #32]
 8000e88:	4bb3      	ldr	r3, [pc, #716]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000e8a:	6a1a      	ldr	r2, [r3, #32]
 8000e8c:	4bb2      	ldr	r3, [pc, #712]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000e8e:	2104      	movs	r1, #4
 8000e90:	438a      	bics	r2, r1
 8000e92:	621a      	str	r2, [r3, #32]
 8000e94:	e01c      	b.n	8000ed0 <HAL_RCC_OscConfig+0x398>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	2b05      	cmp	r3, #5
 8000e9c:	d10c      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x380>
 8000e9e:	4bae      	ldr	r3, [pc, #696]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000ea0:	6a1a      	ldr	r2, [r3, #32]
 8000ea2:	4bad      	ldr	r3, [pc, #692]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000ea4:	2104      	movs	r1, #4
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	621a      	str	r2, [r3, #32]
 8000eaa:	4bab      	ldr	r3, [pc, #684]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000eac:	6a1a      	ldr	r2, [r3, #32]
 8000eae:	4baa      	ldr	r3, [pc, #680]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	621a      	str	r2, [r3, #32]
 8000eb6:	e00b      	b.n	8000ed0 <HAL_RCC_OscConfig+0x398>
 8000eb8:	4ba7      	ldr	r3, [pc, #668]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000eba:	6a1a      	ldr	r2, [r3, #32]
 8000ebc:	4ba6      	ldr	r3, [pc, #664]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	438a      	bics	r2, r1
 8000ec2:	621a      	str	r2, [r3, #32]
 8000ec4:	4ba4      	ldr	r3, [pc, #656]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000ec6:	6a1a      	ldr	r2, [r3, #32]
 8000ec8:	4ba3      	ldr	r3, [pc, #652]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000eca:	2104      	movs	r1, #4
 8000ecc:	438a      	bics	r2, r1
 8000ece:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d014      	beq.n	8000f02 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed8:	f7ff fbc6 	bl	8000668 <HAL_GetTick>
 8000edc:	0003      	movs	r3, r0
 8000ede:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ee0:	e009      	b.n	8000ef6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ee2:	f7ff fbc1 	bl	8000668 <HAL_GetTick>
 8000ee6:	0002      	movs	r2, r0
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	4a9b      	ldr	r2, [pc, #620]	; (800115c <HAL_RCC_OscConfig+0x624>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d901      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e12b      	b.n	800114e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ef6:	4b98      	ldr	r3, [pc, #608]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000ef8:	6a1b      	ldr	r3, [r3, #32]
 8000efa:	2202      	movs	r2, #2
 8000efc:	4013      	ands	r3, r2
 8000efe:	d0f0      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x3aa>
 8000f00:	e013      	b.n	8000f2a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f02:	f7ff fbb1 	bl	8000668 <HAL_GetTick>
 8000f06:	0003      	movs	r3, r0
 8000f08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f0a:	e009      	b.n	8000f20 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f0c:	f7ff fbac 	bl	8000668 <HAL_GetTick>
 8000f10:	0002      	movs	r2, r0
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	4a91      	ldr	r2, [pc, #580]	; (800115c <HAL_RCC_OscConfig+0x624>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e116      	b.n	800114e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f20:	4b8d      	ldr	r3, [pc, #564]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000f22:	6a1b      	ldr	r3, [r3, #32]
 8000f24:	2202      	movs	r2, #2
 8000f26:	4013      	ands	r3, r2
 8000f28:	d1f0      	bne.n	8000f0c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f2a:	231f      	movs	r3, #31
 8000f2c:	18fb      	adds	r3, r7, r3
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d105      	bne.n	8000f40 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f34:	4b88      	ldr	r3, [pc, #544]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000f36:	69da      	ldr	r2, [r3, #28]
 8000f38:	4b87      	ldr	r3, [pc, #540]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000f3a:	4989      	ldr	r1, [pc, #548]	; (8001160 <HAL_RCC_OscConfig+0x628>)
 8000f3c:	400a      	ands	r2, r1
 8000f3e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2210      	movs	r2, #16
 8000f46:	4013      	ands	r3, r2
 8000f48:	d063      	beq.n	8001012 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d12a      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f52:	4b81      	ldr	r3, [pc, #516]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f56:	4b80      	ldr	r3, [pc, #512]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000f58:	2104      	movs	r1, #4
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000f5e:	4b7e      	ldr	r3, [pc, #504]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f62:	4b7d      	ldr	r3, [pc, #500]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000f64:	2101      	movs	r1, #1
 8000f66:	430a      	orrs	r2, r1
 8000f68:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f6a:	f7ff fb7d 	bl	8000668 <HAL_GetTick>
 8000f6e:	0003      	movs	r3, r0
 8000f70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000f72:	e008      	b.n	8000f86 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f74:	f7ff fb78 	bl	8000668 <HAL_GetTick>
 8000f78:	0002      	movs	r2, r0
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d901      	bls.n	8000f86 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e0e3      	b.n	800114e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000f86:	4b74      	ldr	r3, [pc, #464]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	d0f1      	beq.n	8000f74 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000f90:	4b71      	ldr	r3, [pc, #452]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f94:	22f8      	movs	r2, #248	; 0xf8
 8000f96:	4393      	bics	r3, r2
 8000f98:	0019      	movs	r1, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	00da      	lsls	r2, r3, #3
 8000fa0:	4b6d      	ldr	r3, [pc, #436]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	635a      	str	r2, [r3, #52]	; 0x34
 8000fa6:	e034      	b.n	8001012 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	3305      	adds	r3, #5
 8000fae:	d111      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000fb0:	4b69      	ldr	r3, [pc, #420]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000fb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fb4:	4b68      	ldr	r3, [pc, #416]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000fb6:	2104      	movs	r1, #4
 8000fb8:	438a      	bics	r2, r1
 8000fba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000fbc:	4b66      	ldr	r3, [pc, #408]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc0:	22f8      	movs	r2, #248	; 0xf8
 8000fc2:	4393      	bics	r3, r2
 8000fc4:	0019      	movs	r1, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	00da      	lsls	r2, r3, #3
 8000fcc:	4b62      	ldr	r3, [pc, #392]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	635a      	str	r2, [r3, #52]	; 0x34
 8000fd2:	e01e      	b.n	8001012 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000fd4:	4b60      	ldr	r3, [pc, #384]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fd8:	4b5f      	ldr	r3, [pc, #380]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000fda:	2104      	movs	r1, #4
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000fe0:	4b5d      	ldr	r3, [pc, #372]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fe4:	4b5c      	ldr	r3, [pc, #368]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	438a      	bics	r2, r1
 8000fea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fec:	f7ff fb3c 	bl	8000668 <HAL_GetTick>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000ff4:	e008      	b.n	8001008 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ff6:	f7ff fb37 	bl	8000668 <HAL_GetTick>
 8000ffa:	0002      	movs	r2, r0
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e0a2      	b.n	800114e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001008:	4b53      	ldr	r3, [pc, #332]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 800100a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800100c:	2202      	movs	r2, #2
 800100e:	4013      	ands	r3, r2
 8001010:	d1f1      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a1b      	ldr	r3, [r3, #32]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d100      	bne.n	800101c <HAL_RCC_OscConfig+0x4e4>
 800101a:	e097      	b.n	800114c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800101c:	4b4e      	ldr	r3, [pc, #312]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	220c      	movs	r2, #12
 8001022:	4013      	ands	r3, r2
 8001024:	2b08      	cmp	r3, #8
 8001026:	d100      	bne.n	800102a <HAL_RCC_OscConfig+0x4f2>
 8001028:	e06b      	b.n	8001102 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a1b      	ldr	r3, [r3, #32]
 800102e:	2b02      	cmp	r3, #2
 8001030:	d14c      	bne.n	80010cc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001032:	4b49      	ldr	r3, [pc, #292]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	4b48      	ldr	r3, [pc, #288]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8001038:	494a      	ldr	r1, [pc, #296]	; (8001164 <HAL_RCC_OscConfig+0x62c>)
 800103a:	400a      	ands	r2, r1
 800103c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103e:	f7ff fb13 	bl	8000668 <HAL_GetTick>
 8001042:	0003      	movs	r3, r0
 8001044:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001048:	f7ff fb0e 	bl	8000668 <HAL_GetTick>
 800104c:	0002      	movs	r2, r0
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b02      	cmp	r3, #2
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e079      	b.n	800114e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800105a:	4b3f      	ldr	r3, [pc, #252]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	2380      	movs	r3, #128	; 0x80
 8001060:	049b      	lsls	r3, r3, #18
 8001062:	4013      	ands	r3, r2
 8001064:	d1f0      	bne.n	8001048 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001066:	4b3c      	ldr	r3, [pc, #240]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8001068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106a:	220f      	movs	r2, #15
 800106c:	4393      	bics	r3, r2
 800106e:	0019      	movs	r1, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001074:	4b38      	ldr	r3, [pc, #224]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8001076:	430a      	orrs	r2, r1
 8001078:	62da      	str	r2, [r3, #44]	; 0x2c
 800107a:	4b37      	ldr	r3, [pc, #220]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	4a3a      	ldr	r2, [pc, #232]	; (8001168 <HAL_RCC_OscConfig+0x630>)
 8001080:	4013      	ands	r3, r2
 8001082:	0019      	movs	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108c:	431a      	orrs	r2, r3
 800108e:	4b32      	ldr	r3, [pc, #200]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8001090:	430a      	orrs	r2, r1
 8001092:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001094:	4b30      	ldr	r3, [pc, #192]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 800109a:	2180      	movs	r1, #128	; 0x80
 800109c:	0449      	lsls	r1, r1, #17
 800109e:	430a      	orrs	r2, r1
 80010a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a2:	f7ff fae1 	bl	8000668 <HAL_GetTick>
 80010a6:	0003      	movs	r3, r0
 80010a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010ac:	f7ff fadc 	bl	8000668 <HAL_GetTick>
 80010b0:	0002      	movs	r2, r0
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e047      	b.n	800114e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010be:	4b26      	ldr	r3, [pc, #152]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	049b      	lsls	r3, r3, #18
 80010c6:	4013      	ands	r3, r2
 80010c8:	d0f0      	beq.n	80010ac <HAL_RCC_OscConfig+0x574>
 80010ca:	e03f      	b.n	800114c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010cc:	4b22      	ldr	r3, [pc, #136]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b21      	ldr	r3, [pc, #132]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 80010d2:	4924      	ldr	r1, [pc, #144]	; (8001164 <HAL_RCC_OscConfig+0x62c>)
 80010d4:	400a      	ands	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d8:	f7ff fac6 	bl	8000668 <HAL_GetTick>
 80010dc:	0003      	movs	r3, r0
 80010de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010e0:	e008      	b.n	80010f4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010e2:	f7ff fac1 	bl	8000668 <HAL_GetTick>
 80010e6:	0002      	movs	r2, r0
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e02c      	b.n	800114e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010f4:	4b18      	ldr	r3, [pc, #96]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	2380      	movs	r3, #128	; 0x80
 80010fa:	049b      	lsls	r3, r3, #18
 80010fc:	4013      	ands	r3, r2
 80010fe:	d1f0      	bne.n	80010e2 <HAL_RCC_OscConfig+0x5aa>
 8001100:	e024      	b.n	800114c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a1b      	ldr	r3, [r3, #32]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d101      	bne.n	800110e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e01f      	b.n	800114e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800110e:	4b12      	ldr	r3, [pc, #72]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001114:	4b10      	ldr	r3, [pc, #64]	; (8001158 <HAL_RCC_OscConfig+0x620>)
 8001116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001118:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	025b      	lsls	r3, r3, #9
 8001120:	401a      	ands	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001126:	429a      	cmp	r2, r3
 8001128:	d10e      	bne.n	8001148 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	220f      	movs	r2, #15
 800112e:	401a      	ands	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001134:	429a      	cmp	r2, r3
 8001136:	d107      	bne.n	8001148 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001138:	697a      	ldr	r2, [r7, #20]
 800113a:	23f0      	movs	r3, #240	; 0xf0
 800113c:	039b      	lsls	r3, r3, #14
 800113e:	401a      	ands	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001144:	429a      	cmp	r2, r3
 8001146:	d001      	beq.n	800114c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e000      	b.n	800114e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	0018      	movs	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	b008      	add	sp, #32
 8001154:	bd80      	pop	{r7, pc}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	40021000 	.word	0x40021000
 800115c:	00001388 	.word	0x00001388
 8001160:	efffffff 	.word	0xefffffff
 8001164:	feffffff 	.word	0xfeffffff
 8001168:	ffc2ffff 	.word	0xffc2ffff

0800116c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e0b3      	b.n	80012e8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001180:	4b5b      	ldr	r3, [pc, #364]	; (80012f0 <HAL_RCC_ClockConfig+0x184>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2201      	movs	r2, #1
 8001186:	4013      	ands	r3, r2
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	429a      	cmp	r2, r3
 800118c:	d911      	bls.n	80011b2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800118e:	4b58      	ldr	r3, [pc, #352]	; (80012f0 <HAL_RCC_ClockConfig+0x184>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2201      	movs	r2, #1
 8001194:	4393      	bics	r3, r2
 8001196:	0019      	movs	r1, r3
 8001198:	4b55      	ldr	r3, [pc, #340]	; (80012f0 <HAL_RCC_ClockConfig+0x184>)
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	430a      	orrs	r2, r1
 800119e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011a0:	4b53      	ldr	r3, [pc, #332]	; (80012f0 <HAL_RCC_ClockConfig+0x184>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2201      	movs	r2, #1
 80011a6:	4013      	ands	r3, r2
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d001      	beq.n	80011b2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e09a      	b.n	80012e8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2202      	movs	r2, #2
 80011b8:	4013      	ands	r3, r2
 80011ba:	d015      	beq.n	80011e8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2204      	movs	r2, #4
 80011c2:	4013      	ands	r3, r2
 80011c4:	d006      	beq.n	80011d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80011c6:	4b4b      	ldr	r3, [pc, #300]	; (80012f4 <HAL_RCC_ClockConfig+0x188>)
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	4b4a      	ldr	r3, [pc, #296]	; (80012f4 <HAL_RCC_ClockConfig+0x188>)
 80011cc:	21e0      	movs	r1, #224	; 0xe0
 80011ce:	00c9      	lsls	r1, r1, #3
 80011d0:	430a      	orrs	r2, r1
 80011d2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011d4:	4b47      	ldr	r3, [pc, #284]	; (80012f4 <HAL_RCC_ClockConfig+0x188>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	22f0      	movs	r2, #240	; 0xf0
 80011da:	4393      	bics	r3, r2
 80011dc:	0019      	movs	r1, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	4b44      	ldr	r3, [pc, #272]	; (80012f4 <HAL_RCC_ClockConfig+0x188>)
 80011e4:	430a      	orrs	r2, r1
 80011e6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2201      	movs	r2, #1
 80011ee:	4013      	ands	r3, r2
 80011f0:	d040      	beq.n	8001274 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d107      	bne.n	800120a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fa:	4b3e      	ldr	r3, [pc, #248]	; (80012f4 <HAL_RCC_ClockConfig+0x188>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	029b      	lsls	r3, r3, #10
 8001202:	4013      	ands	r3, r2
 8001204:	d114      	bne.n	8001230 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e06e      	b.n	80012e8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b02      	cmp	r3, #2
 8001210:	d107      	bne.n	8001222 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001212:	4b38      	ldr	r3, [pc, #224]	; (80012f4 <HAL_RCC_ClockConfig+0x188>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	2380      	movs	r3, #128	; 0x80
 8001218:	049b      	lsls	r3, r3, #18
 800121a:	4013      	ands	r3, r2
 800121c:	d108      	bne.n	8001230 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e062      	b.n	80012e8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001222:	4b34      	ldr	r3, [pc, #208]	; (80012f4 <HAL_RCC_ClockConfig+0x188>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2202      	movs	r2, #2
 8001228:	4013      	ands	r3, r2
 800122a:	d101      	bne.n	8001230 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e05b      	b.n	80012e8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001230:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <HAL_RCC_ClockConfig+0x188>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2203      	movs	r2, #3
 8001236:	4393      	bics	r3, r2
 8001238:	0019      	movs	r1, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <HAL_RCC_ClockConfig+0x188>)
 8001240:	430a      	orrs	r2, r1
 8001242:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001244:	f7ff fa10 	bl	8000668 <HAL_GetTick>
 8001248:	0003      	movs	r3, r0
 800124a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800124c:	e009      	b.n	8001262 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800124e:	f7ff fa0b 	bl	8000668 <HAL_GetTick>
 8001252:	0002      	movs	r2, r0
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	4a27      	ldr	r2, [pc, #156]	; (80012f8 <HAL_RCC_ClockConfig+0x18c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e042      	b.n	80012e8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001262:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <HAL_RCC_ClockConfig+0x188>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	220c      	movs	r2, #12
 8001268:	401a      	ands	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	429a      	cmp	r2, r3
 8001272:	d1ec      	bne.n	800124e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001274:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <HAL_RCC_ClockConfig+0x184>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2201      	movs	r2, #1
 800127a:	4013      	ands	r3, r2
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	429a      	cmp	r2, r3
 8001280:	d211      	bcs.n	80012a6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <HAL_RCC_ClockConfig+0x184>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2201      	movs	r2, #1
 8001288:	4393      	bics	r3, r2
 800128a:	0019      	movs	r1, r3
 800128c:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <HAL_RCC_ClockConfig+0x184>)
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	430a      	orrs	r2, r1
 8001292:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001294:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <HAL_RCC_ClockConfig+0x184>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2201      	movs	r2, #1
 800129a:	4013      	ands	r3, r2
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d001      	beq.n	80012a6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e020      	b.n	80012e8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2204      	movs	r2, #4
 80012ac:	4013      	ands	r3, r2
 80012ae:	d009      	beq.n	80012c4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80012b0:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <HAL_RCC_ClockConfig+0x188>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	4a11      	ldr	r2, [pc, #68]	; (80012fc <HAL_RCC_ClockConfig+0x190>)
 80012b6:	4013      	ands	r3, r2
 80012b8:	0019      	movs	r1, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68da      	ldr	r2, [r3, #12]
 80012be:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <HAL_RCC_ClockConfig+0x188>)
 80012c0:	430a      	orrs	r2, r1
 80012c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80012c4:	f000 f820 	bl	8001308 <HAL_RCC_GetSysClockFreq>
 80012c8:	0001      	movs	r1, r0
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <HAL_RCC_ClockConfig+0x188>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	091b      	lsrs	r3, r3, #4
 80012d0:	220f      	movs	r2, #15
 80012d2:	4013      	ands	r3, r2
 80012d4:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <HAL_RCC_ClockConfig+0x194>)
 80012d6:	5cd3      	ldrb	r3, [r2, r3]
 80012d8:	000a      	movs	r2, r1
 80012da:	40da      	lsrs	r2, r3
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_RCC_ClockConfig+0x198>)
 80012de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80012e0:	2003      	movs	r0, #3
 80012e2:	f7ff f97b 	bl	80005dc <HAL_InitTick>
  
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	0018      	movs	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b004      	add	sp, #16
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40022000 	.word	0x40022000
 80012f4:	40021000 	.word	0x40021000
 80012f8:	00001388 	.word	0x00001388
 80012fc:	fffff8ff 	.word	0xfffff8ff
 8001300:	0800193c 	.word	0x0800193c
 8001304:	20000000 	.word	0x20000000

08001308 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001322:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	220c      	movs	r2, #12
 800132c:	4013      	ands	r3, r2
 800132e:	2b04      	cmp	r3, #4
 8001330:	d002      	beq.n	8001338 <HAL_RCC_GetSysClockFreq+0x30>
 8001332:	2b08      	cmp	r3, #8
 8001334:	d003      	beq.n	800133e <HAL_RCC_GetSysClockFreq+0x36>
 8001336:	e02c      	b.n	8001392 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800133a:	613b      	str	r3, [r7, #16]
      break;
 800133c:	e02c      	b.n	8001398 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	0c9b      	lsrs	r3, r3, #18
 8001342:	220f      	movs	r2, #15
 8001344:	4013      	ands	r3, r2
 8001346:	4a19      	ldr	r2, [pc, #100]	; (80013ac <HAL_RCC_GetSysClockFreq+0xa4>)
 8001348:	5cd3      	ldrb	r3, [r2, r3]
 800134a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800134c:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800134e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001350:	220f      	movs	r2, #15
 8001352:	4013      	ands	r3, r2
 8001354:	4a16      	ldr	r2, [pc, #88]	; (80013b0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001356:	5cd3      	ldrb	r3, [r2, r3]
 8001358:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	025b      	lsls	r3, r3, #9
 8001360:	4013      	ands	r3, r2
 8001362:	d009      	beq.n	8001378 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001364:	68b9      	ldr	r1, [r7, #8]
 8001366:	4810      	ldr	r0, [pc, #64]	; (80013a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001368:	f7fe fece 	bl	8000108 <__udivsi3>
 800136c:	0003      	movs	r3, r0
 800136e:	001a      	movs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4353      	muls	r3, r2
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	e009      	b.n	800138c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	000a      	movs	r2, r1
 800137c:	0152      	lsls	r2, r2, #5
 800137e:	1a52      	subs	r2, r2, r1
 8001380:	0193      	lsls	r3, r2, #6
 8001382:	1a9b      	subs	r3, r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	185b      	adds	r3, r3, r1
 8001388:	021b      	lsls	r3, r3, #8
 800138a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	613b      	str	r3, [r7, #16]
      break;
 8001390:	e002      	b.n	8001398 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001392:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001394:	613b      	str	r3, [r7, #16]
      break;
 8001396:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001398:	693b      	ldr	r3, [r7, #16]
}
 800139a:	0018      	movs	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	b006      	add	sp, #24
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	40021000 	.word	0x40021000
 80013a8:	007a1200 	.word	0x007a1200
 80013ac:	0800194c 	.word	0x0800194c
 80013b0:	0800195c 	.word	0x0800195c

080013b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e042      	b.n	800144c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	223d      	movs	r2, #61	; 0x3d
 80013ca:	5c9b      	ldrb	r3, [r3, r2]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d107      	bne.n	80013e2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	223c      	movs	r2, #60	; 0x3c
 80013d6:	2100      	movs	r1, #0
 80013d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	0018      	movs	r0, r3
 80013de:	f7ff f883 	bl	80004e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	223d      	movs	r2, #61	; 0x3d
 80013e6:	2102      	movs	r1, #2
 80013e8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	3304      	adds	r3, #4
 80013f2:	0019      	movs	r1, r3
 80013f4:	0010      	movs	r0, r2
 80013f6:	f000 f901 	bl	80015fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2246      	movs	r2, #70	; 0x46
 80013fe:	2101      	movs	r1, #1
 8001400:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	223e      	movs	r2, #62	; 0x3e
 8001406:	2101      	movs	r1, #1
 8001408:	5499      	strb	r1, [r3, r2]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	223f      	movs	r2, #63	; 0x3f
 800140e:	2101      	movs	r1, #1
 8001410:	5499      	strb	r1, [r3, r2]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2240      	movs	r2, #64	; 0x40
 8001416:	2101      	movs	r1, #1
 8001418:	5499      	strb	r1, [r3, r2]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2241      	movs	r2, #65	; 0x41
 800141e:	2101      	movs	r1, #1
 8001420:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2242      	movs	r2, #66	; 0x42
 8001426:	2101      	movs	r1, #1
 8001428:	5499      	strb	r1, [r3, r2]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2243      	movs	r2, #67	; 0x43
 800142e:	2101      	movs	r1, #1
 8001430:	5499      	strb	r1, [r3, r2]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2244      	movs	r2, #68	; 0x44
 8001436:	2101      	movs	r1, #1
 8001438:	5499      	strb	r1, [r3, r2]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2245      	movs	r2, #69	; 0x45
 800143e:	2101      	movs	r1, #1
 8001440:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	223d      	movs	r2, #61	; 0x3d
 8001446:	2101      	movs	r1, #1
 8001448:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	0018      	movs	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	b002      	add	sp, #8
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800145e:	230f      	movs	r3, #15
 8001460:	18fb      	adds	r3, r7, r3
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	223c      	movs	r2, #60	; 0x3c
 800146a:	5c9b      	ldrb	r3, [r3, r2]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d101      	bne.n	8001474 <HAL_TIM_ConfigClockSource+0x20>
 8001470:	2302      	movs	r3, #2
 8001472:	e0bc      	b.n	80015ee <HAL_TIM_ConfigClockSource+0x19a>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	223c      	movs	r2, #60	; 0x3c
 8001478:	2101      	movs	r1, #1
 800147a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	223d      	movs	r2, #61	; 0x3d
 8001480:	2102      	movs	r1, #2
 8001482:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	2277      	movs	r2, #119	; 0x77
 8001490:	4393      	bics	r3, r2
 8001492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	4a58      	ldr	r2, [pc, #352]	; (80015f8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001498:	4013      	ands	r3, r2
 800149a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2280      	movs	r2, #128	; 0x80
 80014aa:	0192      	lsls	r2, r2, #6
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d040      	beq.n	8001532 <HAL_TIM_ConfigClockSource+0xde>
 80014b0:	2280      	movs	r2, #128	; 0x80
 80014b2:	0192      	lsls	r2, r2, #6
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d900      	bls.n	80014ba <HAL_TIM_ConfigClockSource+0x66>
 80014b8:	e088      	b.n	80015cc <HAL_TIM_ConfigClockSource+0x178>
 80014ba:	2280      	movs	r2, #128	; 0x80
 80014bc:	0152      	lsls	r2, r2, #5
 80014be:	4293      	cmp	r3, r2
 80014c0:	d100      	bne.n	80014c4 <HAL_TIM_ConfigClockSource+0x70>
 80014c2:	e088      	b.n	80015d6 <HAL_TIM_ConfigClockSource+0x182>
 80014c4:	2280      	movs	r2, #128	; 0x80
 80014c6:	0152      	lsls	r2, r2, #5
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d900      	bls.n	80014ce <HAL_TIM_ConfigClockSource+0x7a>
 80014cc:	e07e      	b.n	80015cc <HAL_TIM_ConfigClockSource+0x178>
 80014ce:	2b70      	cmp	r3, #112	; 0x70
 80014d0:	d018      	beq.n	8001504 <HAL_TIM_ConfigClockSource+0xb0>
 80014d2:	d900      	bls.n	80014d6 <HAL_TIM_ConfigClockSource+0x82>
 80014d4:	e07a      	b.n	80015cc <HAL_TIM_ConfigClockSource+0x178>
 80014d6:	2b60      	cmp	r3, #96	; 0x60
 80014d8:	d04f      	beq.n	800157a <HAL_TIM_ConfigClockSource+0x126>
 80014da:	d900      	bls.n	80014de <HAL_TIM_ConfigClockSource+0x8a>
 80014dc:	e076      	b.n	80015cc <HAL_TIM_ConfigClockSource+0x178>
 80014de:	2b50      	cmp	r3, #80	; 0x50
 80014e0:	d03b      	beq.n	800155a <HAL_TIM_ConfigClockSource+0x106>
 80014e2:	d900      	bls.n	80014e6 <HAL_TIM_ConfigClockSource+0x92>
 80014e4:	e072      	b.n	80015cc <HAL_TIM_ConfigClockSource+0x178>
 80014e6:	2b40      	cmp	r3, #64	; 0x40
 80014e8:	d057      	beq.n	800159a <HAL_TIM_ConfigClockSource+0x146>
 80014ea:	d900      	bls.n	80014ee <HAL_TIM_ConfigClockSource+0x9a>
 80014ec:	e06e      	b.n	80015cc <HAL_TIM_ConfigClockSource+0x178>
 80014ee:	2b30      	cmp	r3, #48	; 0x30
 80014f0:	d063      	beq.n	80015ba <HAL_TIM_ConfigClockSource+0x166>
 80014f2:	d86b      	bhi.n	80015cc <HAL_TIM_ConfigClockSource+0x178>
 80014f4:	2b20      	cmp	r3, #32
 80014f6:	d060      	beq.n	80015ba <HAL_TIM_ConfigClockSource+0x166>
 80014f8:	d868      	bhi.n	80015cc <HAL_TIM_ConfigClockSource+0x178>
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d05d      	beq.n	80015ba <HAL_TIM_ConfigClockSource+0x166>
 80014fe:	2b10      	cmp	r3, #16
 8001500:	d05b      	beq.n	80015ba <HAL_TIM_ConfigClockSource+0x166>
 8001502:	e063      	b.n	80015cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6818      	ldr	r0, [r3, #0]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	6899      	ldr	r1, [r3, #8]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	f000 f962 	bl	80017dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	2277      	movs	r2, #119	; 0x77
 8001524:	4313      	orrs	r3, r2
 8001526:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68ba      	ldr	r2, [r7, #8]
 800152e:	609a      	str	r2, [r3, #8]
      break;
 8001530:	e052      	b.n	80015d8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6818      	ldr	r0, [r3, #0]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	6899      	ldr	r1, [r3, #8]
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	f000 f94b 	bl	80017dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2180      	movs	r1, #128	; 0x80
 8001552:	01c9      	lsls	r1, r1, #7
 8001554:	430a      	orrs	r2, r1
 8001556:	609a      	str	r2, [r3, #8]
      break;
 8001558:	e03e      	b.n	80015d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6818      	ldr	r0, [r3, #0]
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	6859      	ldr	r1, [r3, #4]
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	001a      	movs	r2, r3
 8001568:	f000 f8be 	bl	80016e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2150      	movs	r1, #80	; 0x50
 8001572:	0018      	movs	r0, r3
 8001574:	f000 f918 	bl	80017a8 <TIM_ITRx_SetConfig>
      break;
 8001578:	e02e      	b.n	80015d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6818      	ldr	r0, [r3, #0]
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	6859      	ldr	r1, [r3, #4]
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	001a      	movs	r2, r3
 8001588:	f000 f8dc 	bl	8001744 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2160      	movs	r1, #96	; 0x60
 8001592:	0018      	movs	r0, r3
 8001594:	f000 f908 	bl	80017a8 <TIM_ITRx_SetConfig>
      break;
 8001598:	e01e      	b.n	80015d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6818      	ldr	r0, [r3, #0]
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	6859      	ldr	r1, [r3, #4]
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	001a      	movs	r2, r3
 80015a8:	f000 f89e 	bl	80016e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2140      	movs	r1, #64	; 0x40
 80015b2:	0018      	movs	r0, r3
 80015b4:	f000 f8f8 	bl	80017a8 <TIM_ITRx_SetConfig>
      break;
 80015b8:	e00e      	b.n	80015d8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	0019      	movs	r1, r3
 80015c4:	0010      	movs	r0, r2
 80015c6:	f000 f8ef 	bl	80017a8 <TIM_ITRx_SetConfig>
      break;
 80015ca:	e005      	b.n	80015d8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80015cc:	230f      	movs	r3, #15
 80015ce:	18fb      	adds	r3, r7, r3
 80015d0:	2201      	movs	r2, #1
 80015d2:	701a      	strb	r2, [r3, #0]
      break;
 80015d4:	e000      	b.n	80015d8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80015d6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	223d      	movs	r2, #61	; 0x3d
 80015dc:	2101      	movs	r1, #1
 80015de:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	223c      	movs	r2, #60	; 0x3c
 80015e4:	2100      	movs	r1, #0
 80015e6:	5499      	strb	r1, [r3, r2]

  return status;
 80015e8:	230f      	movs	r3, #15
 80015ea:	18fb      	adds	r3, r7, r3
 80015ec:	781b      	ldrb	r3, [r3, #0]
}
 80015ee:	0018      	movs	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	b004      	add	sp, #16
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	ffff00ff 	.word	0xffff00ff

080015fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a30      	ldr	r2, [pc, #192]	; (80016d0 <TIM_Base_SetConfig+0xd4>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d008      	beq.n	8001626 <TIM_Base_SetConfig+0x2a>
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	2380      	movs	r3, #128	; 0x80
 8001618:	05db      	lsls	r3, r3, #23
 800161a:	429a      	cmp	r2, r3
 800161c:	d003      	beq.n	8001626 <TIM_Base_SetConfig+0x2a>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a2c      	ldr	r2, [pc, #176]	; (80016d4 <TIM_Base_SetConfig+0xd8>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d108      	bne.n	8001638 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2270      	movs	r2, #112	; 0x70
 800162a:	4393      	bics	r3, r2
 800162c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	4313      	orrs	r3, r2
 8001636:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a25      	ldr	r2, [pc, #148]	; (80016d0 <TIM_Base_SetConfig+0xd4>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d014      	beq.n	800166a <TIM_Base_SetConfig+0x6e>
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	05db      	lsls	r3, r3, #23
 8001646:	429a      	cmp	r2, r3
 8001648:	d00f      	beq.n	800166a <TIM_Base_SetConfig+0x6e>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a21      	ldr	r2, [pc, #132]	; (80016d4 <TIM_Base_SetConfig+0xd8>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d00b      	beq.n	800166a <TIM_Base_SetConfig+0x6e>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a20      	ldr	r2, [pc, #128]	; (80016d8 <TIM_Base_SetConfig+0xdc>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d007      	beq.n	800166a <TIM_Base_SetConfig+0x6e>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a1f      	ldr	r2, [pc, #124]	; (80016dc <TIM_Base_SetConfig+0xe0>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d003      	beq.n	800166a <TIM_Base_SetConfig+0x6e>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a1e      	ldr	r2, [pc, #120]	; (80016e0 <TIM_Base_SetConfig+0xe4>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d108      	bne.n	800167c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4a1d      	ldr	r2, [pc, #116]	; (80016e4 <TIM_Base_SetConfig+0xe8>)
 800166e:	4013      	ands	r3, r2
 8001670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	4313      	orrs	r3, r2
 800167a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2280      	movs	r2, #128	; 0x80
 8001680:	4393      	bics	r3, r2
 8001682:	001a      	movs	r2, r3
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	695b      	ldr	r3, [r3, #20]
 8001688:	4313      	orrs	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <TIM_Base_SetConfig+0xd4>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d007      	beq.n	80016ba <TIM_Base_SetConfig+0xbe>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <TIM_Base_SetConfig+0xe0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d003      	beq.n	80016ba <TIM_Base_SetConfig+0xbe>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <TIM_Base_SetConfig+0xe4>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d103      	bne.n	80016c2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	691a      	ldr	r2, [r3, #16]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2201      	movs	r2, #1
 80016c6:	615a      	str	r2, [r3, #20]
}
 80016c8:	46c0      	nop			; (mov r8, r8)
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b004      	add	sp, #16
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40012c00 	.word	0x40012c00
 80016d4:	40000400 	.word	0x40000400
 80016d8:	40002000 	.word	0x40002000
 80016dc:	40014400 	.word	0x40014400
 80016e0:	40014800 	.word	0x40014800
 80016e4:	fffffcff 	.word	0xfffffcff

080016e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	2201      	movs	r2, #1
 8001700:	4393      	bics	r3, r2
 8001702:	001a      	movs	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	22f0      	movs	r2, #240	; 0xf0
 8001712:	4393      	bics	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	220a      	movs	r2, #10
 8001724:	4393      	bics	r3, r2
 8001726:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	4313      	orrs	r3, r2
 800172e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	621a      	str	r2, [r3, #32]
}
 800173c:	46c0      	nop			; (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	b006      	add	sp, #24
 8001742:	bd80      	pop	{r7, pc}

08001744 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	2210      	movs	r2, #16
 8001756:	4393      	bics	r3, r2
 8001758:	001a      	movs	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <TIM_TI2_ConfigInputStage+0x60>)
 800176e:	4013      	ands	r3, r2
 8001770:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	031b      	lsls	r3, r3, #12
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	4313      	orrs	r3, r2
 800177a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	22a0      	movs	r2, #160	; 0xa0
 8001780:	4393      	bics	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	011b      	lsls	r3, r3, #4
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	621a      	str	r2, [r3, #32]
}
 800179a:	46c0      	nop			; (mov r8, r8)
 800179c:	46bd      	mov	sp, r7
 800179e:	b006      	add	sp, #24
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	ffff0fff 	.word	0xffff0fff

080017a8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2270      	movs	r2, #112	; 0x70
 80017bc:	4393      	bics	r3, r2
 80017be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	2207      	movs	r2, #7
 80017c8:	4313      	orrs	r3, r2
 80017ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	609a      	str	r2, [r3, #8]
}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b004      	add	sp, #16
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
 80017e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	4a09      	ldr	r2, [pc, #36]	; (8001818 <TIM_ETR_SetConfig+0x3c>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	021a      	lsls	r2, r3, #8
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	431a      	orrs	r2, r3
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	4313      	orrs	r3, r2
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	4313      	orrs	r3, r2
 8001808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	609a      	str	r2, [r3, #8]
}
 8001810:	46c0      	nop			; (mov r8, r8)
 8001812:	46bd      	mov	sp, r7
 8001814:	b006      	add	sp, #24
 8001816:	bd80      	pop	{r7, pc}
 8001818:	ffff00ff 	.word	0xffff00ff

0800181c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	223c      	movs	r2, #60	; 0x3c
 800182a:	5c9b      	ldrb	r3, [r3, r2]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d101      	bne.n	8001834 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001830:	2302      	movs	r3, #2
 8001832:	e042      	b.n	80018ba <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	223c      	movs	r2, #60	; 0x3c
 8001838:	2101      	movs	r1, #1
 800183a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	223d      	movs	r2, #61	; 0x3d
 8001840:	2102      	movs	r1, #2
 8001842:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2270      	movs	r2, #112	; 0x70
 8001858:	4393      	bics	r3, r2
 800185a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	4313      	orrs	r3, r2
 8001864:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a14      	ldr	r2, [pc, #80]	; (80018c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d00a      	beq.n	800188e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	05db      	lsls	r3, r3, #23
 8001880:	429a      	cmp	r2, r3
 8001882:	d004      	beq.n	800188e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0f      	ldr	r2, [pc, #60]	; (80018c8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d10c      	bne.n	80018a8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	2280      	movs	r2, #128	; 0x80
 8001892:	4393      	bics	r3, r2
 8001894:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	4313      	orrs	r3, r2
 800189e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	223d      	movs	r2, #61	; 0x3d
 80018ac:	2101      	movs	r1, #1
 80018ae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	223c      	movs	r2, #60	; 0x3c
 80018b4:	2100      	movs	r1, #0
 80018b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	0018      	movs	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	b004      	add	sp, #16
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	40012c00 	.word	0x40012c00
 80018c8:	40000400 	.word	0x40000400

080018cc <__libc_init_array>:
 80018cc:	b570      	push	{r4, r5, r6, lr}
 80018ce:	2600      	movs	r6, #0
 80018d0:	4d0c      	ldr	r5, [pc, #48]	; (8001904 <__libc_init_array+0x38>)
 80018d2:	4c0d      	ldr	r4, [pc, #52]	; (8001908 <__libc_init_array+0x3c>)
 80018d4:	1b64      	subs	r4, r4, r5
 80018d6:	10a4      	asrs	r4, r4, #2
 80018d8:	42a6      	cmp	r6, r4
 80018da:	d109      	bne.n	80018f0 <__libc_init_array+0x24>
 80018dc:	2600      	movs	r6, #0
 80018de:	f000 f821 	bl	8001924 <_init>
 80018e2:	4d0a      	ldr	r5, [pc, #40]	; (800190c <__libc_init_array+0x40>)
 80018e4:	4c0a      	ldr	r4, [pc, #40]	; (8001910 <__libc_init_array+0x44>)
 80018e6:	1b64      	subs	r4, r4, r5
 80018e8:	10a4      	asrs	r4, r4, #2
 80018ea:	42a6      	cmp	r6, r4
 80018ec:	d105      	bne.n	80018fa <__libc_init_array+0x2e>
 80018ee:	bd70      	pop	{r4, r5, r6, pc}
 80018f0:	00b3      	lsls	r3, r6, #2
 80018f2:	58eb      	ldr	r3, [r5, r3]
 80018f4:	4798      	blx	r3
 80018f6:	3601      	adds	r6, #1
 80018f8:	e7ee      	b.n	80018d8 <__libc_init_array+0xc>
 80018fa:	00b3      	lsls	r3, r6, #2
 80018fc:	58eb      	ldr	r3, [r5, r3]
 80018fe:	4798      	blx	r3
 8001900:	3601      	adds	r6, #1
 8001902:	e7f2      	b.n	80018ea <__libc_init_array+0x1e>
 8001904:	0800196c 	.word	0x0800196c
 8001908:	0800196c 	.word	0x0800196c
 800190c:	0800196c 	.word	0x0800196c
 8001910:	08001970 	.word	0x08001970

08001914 <memset>:
 8001914:	0003      	movs	r3, r0
 8001916:	1882      	adds	r2, r0, r2
 8001918:	4293      	cmp	r3, r2
 800191a:	d100      	bne.n	800191e <memset+0xa>
 800191c:	4770      	bx	lr
 800191e:	7019      	strb	r1, [r3, #0]
 8001920:	3301      	adds	r3, #1
 8001922:	e7f9      	b.n	8001918 <memset+0x4>

08001924 <_init>:
 8001924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800192a:	bc08      	pop	{r3}
 800192c:	469e      	mov	lr, r3
 800192e:	4770      	bx	lr

08001930 <_fini>:
 8001930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001936:	bc08      	pop	{r3}
 8001938:	469e      	mov	lr, r3
 800193a:	4770      	bx	lr
